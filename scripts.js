// ‰∏ªË¶ÅÂ∫îÁî®ÈÄªËæë
class OfficeFishApp {
    constructor() {
        this.currentTab = 'games';
        this.currentModal = null;
        this.isHidden = false;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadSettings();
        this.setupKeyboardShortcuts();
        console.log('Â∑•‰ΩúÂä©ÊâãÂ∑≤ÂêØÂä® üéØ');
    }

    setupEventListeners() {
        // ÂØºËà™Ê†áÁ≠æÂàáÊç¢
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const targetTab = e.currentTarget.dataset.tab;
                this.switchTab(targetTab);
            });
        });

        // Ê∏∏ÊàèÂç°ÁâáÁÇπÂáªÂíåÈîÆÁõò‰∫ã‰ª∂
        document.querySelectorAll('.game-card').forEach(card => {
            const handleActivation = () => {
                const gameType = card.dataset.game;
                this.openGame(gameType);
            };
            
            card.addEventListener('click', handleActivation);
            card.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    handleActivation();
                }
            });
        });

        // Â∑•ÂÖ∑Âç°ÁâáÁÇπÂáªÂíåÈîÆÁõò‰∫ã‰ª∂
        document.querySelectorAll('.tool-card').forEach(card => {
            const handleActivation = () => {
                const toolType = card.dataset.tool;
                this.openTool(toolType);
            };
            
            card.addEventListener('click', handleActivation);
            card.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    handleActivation();
                }
            });
        });

        // Â®±‰πêÂç°ÁâáÁÇπÂáªÂíåÈîÆÁõò‰∫ã‰ª∂
        document.querySelectorAll('.entertainment-card').forEach(card => {
            const handleActivation = () => {
                const entertainmentType = card.dataset.entertainment;
                this.openEntertainment(entertainmentType);
            };
            
            card.addEventListener('click', handleActivation);
            card.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    handleActivation();
                }
            });
        });


        // Ê®°ÊÄÅÊ°ÜÂÖ≥Èó≠
        document.getElementById('modal-close').addEventListener('click', () => {
            this.closeModal();
        });

        document.querySelector('.modal-backdrop').addEventListener('click', () => {
            this.closeModal();
        });

        // ‰∏ªÈ¢òÂàáÊç¢
        document.getElementById('theme-toggle').addEventListener('click', () => {
            this.toggleTheme();
        });

        // ÂÖ®Â±èÂàáÊç¢
        document.getElementById('fullscreen-toggle').addEventListener('click', () => {
            this.toggleFullscreen();
        });
    }

    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl+Shift+H: ÈöêËóè/ÊòæÁ§∫Â∫îÁî®
            if (e.ctrlKey && e.shiftKey && e.key === 'H') {
                e.preventDefault();
                this.toggleVisibility();
            }

            // Esc: ÂÖ≥Èó≠Ê®°ÊÄÅÊ°ÜÊàñËøîÂõû
            if (e.key === 'Escape') {
                if (this.currentModal) {
                    this.closeModal();
                }
            }

            // ÂºπÁ™óÂºÄÂêØÊó∂ÔºåÈòªÊ≠¢ÊñπÂêëÈîÆÂºïËµ∑ÁöÑÈ°µÈù¢ÊªöÂä®/‰ΩçÁßª
            if (this.currentModal && (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight')) {
                e.preventDefault();
                return;
            }

            // Êï∞Â≠óÈîÆÂø´ÈÄüÂàáÊç¢Ê†áÁ≠æ
            if (e.key >= '1' && e.key <= '4' && !e.ctrlKey && !e.altKey) {
                const tabs = ['games', 'tools', 'entertainment', 'links'];
                const tabIndex = parseInt(e.key) - 1;
                if (tabs[tabIndex]) {
                    this.switchTab(tabs[tabIndex]);
                }
            }

            // ÊñπÂêëÈîÆÂØºËà™ÔºàÊ®°ÊÄÅÊ°ÜÂºÄÂêØÊó∂‰∏çËß¶ÂèëÔºâ
            if (!this.currentModal && (e.key === 'ArrowLeft' || e.key === 'ArrowRight')) {
                const tabs = ['games', 'tools', 'entertainment', 'links'];
                const currentIndex = tabs.indexOf(this.currentTab);
                let newIndex;
                
                if (e.key === 'ArrowLeft') {
                    newIndex = currentIndex > 0 ? currentIndex - 1 : tabs.length - 1;
                } else {
                    newIndex = currentIndex < tabs.length - 1 ? currentIndex + 1 : 0;
                }
                
                this.switchTab(tabs[newIndex]);
                e.preventDefault();
            }
        });
    }

    switchTab(tabName) {
        // Êõ¥Êñ∞ÂØºËà™Ê†áÁ≠æÁä∂ÊÄÅ
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.classList.remove('active');
            tab.setAttribute('aria-selected', 'false');
        });
        const activeTab = document.querySelector(`[data-tab="${tabName}"]`);
        activeTab.classList.add('active');
        activeTab.setAttribute('aria-selected', 'true');

        // Êõ¥Êñ∞ÂÜÖÂÆπÂå∫Âüü
        document.querySelectorAll('.content-section').forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(tabName).classList.add('active');

        // ÁâπÊÆäÂ§ÑÁêÜÔºöÂàùÂßãÂåñlinksÊ®°Âùó
        if (tabName === 'links' && window.LinksManager && !window.linksManager) {
            window.linksManager = new window.LinksManager();
        }

        this.currentTab = tabName;
        this.saveSettings();
    }

    openGame(gameType) {
        const gameTitles = {
            '2048': '2048 Êï∞Â≠óÊ∏∏Êàè',
            'memory': 'ËÆ∞ÂøÜÈÖçÂØπÊ∏∏Êàè',
            'guess': 'Êï∞Â≠óÁåúË∞úÊ∏∏Êàè',
            'snake': 'Ë¥™ÂêÉËõáÊ∏∏Êàè',
            'tetris': '‰øÑÁΩóÊñØÊñπÂùó',
            'minesweeper': 'Êâ´Èõ∑Ê∏∏Êàè',
            'puzzle': 'ÊªëÂùóÊãºÂõæ',
            'link': 'ËøûËøûÁúã',
            'shooter': 'Èõ∑ÈúÜÊàòÊú∫'
        };

        this.openModal(gameTitles[gameType], () => {
            // Ê∏∏ÊàèÂÜÖÂÆπÂ∞ÜÂú®games.js‰∏≠Â§ÑÁêÜ
            if (window.GameManager) {
                window.GameManager.initGame(gameType);
            }
        });
    }

    openTool(toolType) {
        const toolTitles = {
            'pomodoro': 'Áï™ËåÑÈíüËÆ°Êó∂Âô®',
            'todo': 'ÂæÖÂäû‰∫ãÈ°πÊ∏ÖÂçï',
            'calculator': 'ËÆ°ÁÆóÂô®',
            'random': 'ÈöèÊú∫Â∑•ÂÖ∑'
        };

        this.openModal(toolTitles[toolType], () => {
            // Â∑•ÂÖ∑ÂÜÖÂÆπÂ∞ÜÂú®tools.js‰∏≠Â§ÑÁêÜ
            if (window.ToolManager) {
                window.ToolManager.initTool(toolType);
            }
        });
    }

    openEntertainment(entertainmentType) {
        const entertainmentTitles = {
            'matrix': 'Êï∞Â≠óÈõ®ÊïàÊûú',
            'particles': 'Á≤íÂ≠êÂä®Áîª',
            'visualizer': 'Èü≥‰πêÂèØËßÜÂåñ',
            'colors': 'È¢úËâ≤ÁîüÊàêÂô®'
        };

        this.openModal(entertainmentTitles[entertainmentType], () => {
            // Â®±‰πêÂÜÖÂÆπÂ∞ÜÂú®entertainment.js‰∏≠Â§ÑÁêÜ
            if (window.EntertainmentManager) {
                window.EntertainmentManager.initEntertainment(entertainmentType);
            }
        });
    }


    openModal(title, callback) {
        const modalContainer = document.getElementById('modal-container');
        const modalTitle = document.getElementById('modal-title');
        const modalBody = document.getElementById('modal-body');

        modalTitle.textContent = title;
        modalBody.innerHTML = '<div class="text-center"><div class="loading"></div><p style="margin-top: 1rem;">Âä†ËΩΩ‰∏≠...</p></div>';
        
        modalContainer.classList.add('active');
        this.currentModal = true;

        // ÊâßË°åÂõûË∞ÉÂáΩÊï∞
        if (callback) {
            // ‰ΩøÁî® requestAnimationFrame Á°Æ‰øùDOMÊõ¥Êñ∞ÂêéÂÜçÊâßË°å
            requestAnimationFrame(() => {
                setTimeout(callback, 50);
            });
        }
    }

    closeModal() {
        const modalContainer = document.getElementById('modal-container');
        modalContainer.classList.remove('active');
        this.currentModal = null;

        // Ê∏ÖÁêÜÊ®°ÊÄÅÊ°ÜÂÜÖÂÆπ
        document.getElementById('modal-body').innerHTML = '';

        // ÂÅúÊ≠¢ÊâÄÊúâÂä®ÁîªÂíåÂÆöÊó∂Âô®
        if (window.GameManager) {
            window.GameManager.cleanup();
        }
        if (window.ToolManager) {
            window.ToolManager.cleanup();
        }
        if (window.EntertainmentManager) {
            window.EntertainmentManager.cleanup();
        }
    }

    toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        
        // Êõ¥Êñ∞‰∏ªÈ¢òÂõæÊ†á
        const themeIcon = document.querySelector('#theme-toggle .control-icon');
        themeIcon.textContent = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        
        this.saveSettings();
    }

    toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen().catch(err => {
                console.log('ÂÖ®Â±èÊ®°ÂºèËØ∑Ê±ÇÂ§±Ë¥•:', err);
            });
        } else {
            document.exitFullscreen();
        }
    }

    toggleVisibility() {
        const container = document.querySelector('.container');
        const shortcutHint = document.getElementById('shortcut-hint');
        
        if (this.isHidden) {
            container.style.display = 'flex';
            shortcutHint.style.display = 'block';
            this.isHidden = false;
        } else {
            container.style.display = 'none';
            shortcutHint.style.display = 'none';
            this.isHidden = true;
        }
    }

    loadSettings() {
        try {
            const settings = JSON.parse(localStorage.getItem('officeFishSettings') || '{}');
            
            // Âä†ËΩΩ‰∏ªÈ¢òËÆæÁΩÆ
            if (settings.theme) {
                document.documentElement.setAttribute('data-theme', settings.theme);
                const themeIcon = document.querySelector('#theme-toggle .control-icon');
                themeIcon.textContent = settings.theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
            }

            // Âä†ËΩΩÂΩìÂâçÊ†áÁ≠æ
            if (settings.currentTab) {
                this.switchTab(settings.currentTab);
            }
        } catch (error) {
            console.error('Âä†ËΩΩËÆæÁΩÆÂ§±Ë¥•:', error);
        }
    }

    saveSettings() {
        try {
            const settings = {
                theme: document.documentElement.getAttribute('data-theme') || 'light',
                currentTab: this.currentTab
            };
            localStorage.setItem('officeFishSettings', JSON.stringify(settings));
        } catch (error) {
            console.error('‰øùÂ≠òËÆæÁΩÆÂ§±Ë¥•:', error);
        }
    }

    // Â∑•ÂÖ∑ÊñπÊ≥ï
    showNotification(message, type = 'info') {
        // ÁßªÈô§Áé∞ÊúâÁöÑÈÄöÁü•
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notification => {
            document.body.removeChild(notification);
        });

        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">${this.getNotificationIcon(type)}</span>
                <span class="notification-message">${message}</span>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // ÊòæÁ§∫Âä®Áîª
        requestAnimationFrame(() => {
            notification.classList.add('show');
        });
        
        // Ëá™Âä®ÈöêËóè
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }

    getNotificationIcon(type) {
        const icons = {
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        };
        return icons[type] || icons.info;
    }

    // Êï∞ÊçÆÂ≠òÂÇ®Â∑•ÂÖ∑
    saveData(key, data) {
        try {
            localStorage.setItem(`officeFish_${key}`, JSON.stringify(data));
        } catch (error) {
            console.error('‰øùÂ≠òÊï∞ÊçÆÂ§±Ë¥•:', error);
        }
    }

    loadData(key, defaultValue = null) {
        try {
            const data = localStorage.getItem(`officeFish_${key}`);
            return data ? JSON.parse(data) : defaultValue;
        } catch (error) {
            console.error('Âä†ËΩΩÊï∞ÊçÆÂ§±Ë¥•:', error);
            return defaultValue;
        }
    }

    // Â∑•ÂÖ∑ÂáΩÊï∞
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    throttle(func, limit) {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    }
}

// ÂàùÂßãÂåñÂ∫îÁî®
document.addEventListener('DOMContentLoaded', () => {
    window.app = new OfficeFishApp();
});

// ÂØºÂá∫Âà∞ÂÖ®Â±Ä
window.OfficeFishApp = OfficeFishApp;
